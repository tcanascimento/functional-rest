ext {
    jupiter_version='5.6.1'
    alter_version='1.6.1'
}

dependencies {

    implementation(
            'org.junit.jupiter:junit-jupiter-migrationsupport:'+"${jupiter_version}",
            'org.junit.jupiter:junit-jupiter-engine:'+"${jupiter_version}",
            'org.junit.jupiter:junit-jupiter-params:'+"${jupiter_version}",
            'org.junit.platform:junit-platform-console:'+"${alter_version}",
            'org.junit.platform:junit-platform-launcher:'+"${alter_version}",
            'org.junit.platform:junit-platform-runner:'+"${alter_version}",
            'org.junit.platform:junit-platform-commons:'+"${alter_version}")

}


test {

    description = 'Executa testes. Para executar tags especÃ­ficas, use: gradle clean test -Dtag="tag".'
    testLogging.showStandardStreams = true
    String tag = System.properties.getProperty("tag")
    systemProperties = [
            'junit.jupiter.extensions.autodetection.enabled': 'true',
            'junit.jupiter.testinstance.lifecycle.default': 'per_class'
    ]

    useJUnitPlatform() {

        if(null != tag && !tag.equalsIgnoreCase("")) includeTags String.valueOf(tag)
    }

    testLogging {
        events 'PASSED', 'FAILED', 'SKIPPED'
    }

    beforeTest { descriptor ->
        logger.lifecycle("Running test: ${descriptor}")
    }
    afterSuite { desc, result ->
        if (!desc.parent) {
            println "\nTest result: ${result.resultType}"
            println "Test summary: ${result.testCount} tests, " +
                    "${result.successfulTestCount} succeeded, " +
                    "${result.failedTestCount} failed, " +
                    "${result.skippedTestCount} skipped"
        }
    }

    /* jacoco {
        destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
        classDumpDir = file("$buildDir/jacoco/classpathdumps")
    } */

}